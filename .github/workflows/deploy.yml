name: Deploy to Production

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/student-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/student-frontend

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create deployment directory
      run: |
        mkdir -p deployment
        cp docker-compose.prod.yml deployment/
        cp -r mysql-init deployment/

    - name: Create environment file
      run: |
        cat > deployment/.env << EOF
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_USERNAME=${{ secrets.DB_USERNAME }}
        REGISTRY=${{ env.REGISTRY }}
        IMAGE_NAME_BACKEND=${{ env.IMAGE_NAME_BACKEND }}
        IMAGE_NAME_FRONTEND=${{ env.IMAGE_NAME_FRONTEND }}
        EOF

    - name: Deploy with Docker Compose
      id: deploy
      run: |
        cd deployment
        
        # Pull latest images
        docker compose -f docker-compose.prod.yml pull
        
        # Deploy with zero downtime
        docker compose -f docker-compose.prod.yml up -d --wait
        
        # Health check
        echo "Waiting for services to be healthy..."
        timeout 300 bash -c '
          while ! curl -f http://localhost/health > /dev/null 2>&1; do
            echo "Waiting for frontend..."
            sleep 10
          done
          while ! curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; do
            echo "Waiting for backend..."
            sleep 10
          done
        '
        
        echo "url=http://localhost" >> $GITHUB_OUTPUT
        echo "Deployment successful!"

    - name: Run smoke tests
      run: |
        # Test frontend
        curl -f http://localhost/health || exit 1
        
        # Test backend health
        curl -f http://localhost:8080/actuator/health || exit 1
        
        # Test API endpoint (adjust as needed)
        # curl -f http://localhost:8080/api/students || exit 1

    - name: Cleanup old images
      run: |
        docker image prune -af --filter "until=24h"

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
